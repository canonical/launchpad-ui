@import "normalize.css";
@import "$lib/styles/reset.css";
@import "$lib/styles/font-faces.css";
@import "@canonical/launchpad-design-tokens/dist/css/dimension/responsive.css";
@import "@canonical/launchpad-design-tokens/dist/css/typography/responsive.css";
@import "@canonical/launchpad-design-tokens/dist/css/opacity/opacity.css";
@import "@canonical/launchpad-design-tokens/dist/css/transition/preferred.css";
@import "$lib/modifiers/styles/index.css";

html {
  color: var(--tmp-color-text-default);
  background-color: var(--tmp-color-background-default);

  /* 
  TODO: Should the color be controlled on the level of modifiers (severity)? If so, how?
  Outline colors, according to vanilla should:
    - on `Chip` stay default no matter the modifier,
      - OK, we just don't subscribe to the context at all;
    - on `TextInput` follow the values of the secondary context,
      - OK, we subscribe to the secondary context;
    - on `Button` stay default for all severities but `positive`, where it should become a very dark green,
      - not OK, we don't have the required value in the severity context.
  */
  --focus-outline: var(--dimension-stroke-thickness-large) solid
    var(--tmp-color-border-focus);
  /* Most elements have the outline on the inside of the element. Needs to be adjusted for specific cases (e.g. checkbox, radio) */
  --focus-outline-offset: calc(var(--dimension-stroke-thickness-large) * -1);
}

body {
  font: var(--tmp-typography-paragraph-s);
}

*:focus-visible {
  outline: var(--focus-outline);
  outline-offset: var(--focus-outline-offset);
}
